/**
 * Tippspiel
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.2
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Tipp } from '../model/tipp';
import { TippResult } from '../model/tippResult';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class TippService {

    protected basePath = 'http://192.168.0.199/tippspielDB';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Submit a Tipp
     * 
     * @param token User token.
     * @param tipps 
     * @param passphrase 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addBet(token: string, tipps: string, passphrase: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addBet(token: string, tipps: string, passphrase: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addBet(token: string, tipps: string, passphrase: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addBet(token: string, tipps: string, passphrase: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling addBet.');
        }
        if (tipps === null || tipps === undefined) {
            throw new Error('Required parameter tipps was null or undefined when calling addBet.');
        }
        if (passphrase === null || passphrase === undefined) {
            throw new Error('Required parameter passphrase was null or undefined when calling addBet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (tipps !== undefined) {
            formParams = formParams.append('tipps', <any>tipps) || formParams;
        }
        if (passphrase !== undefined) {
            formParams = formParams.append('passphrase', <any>passphrase) || formParams;
        }

        return this.httpClient.post<any>(`${this.basePath}/Tipp/${encodeURIComponent(String(token))}`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Submit a Tipp
     * 
     * @param gameId User token.
     * @param passphrase 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllBets(gameId: string, passphrase: string, observe?: 'body', reportProgress?: boolean): Observable<Array<TippResult>>;
    public getAllBets(gameId: string, passphrase: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<TippResult>>>;
    public getAllBets(gameId: string, passphrase: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<TippResult>>>;
    public getAllBets(gameId: string, passphrase: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (gameId === null || gameId === undefined) {
            throw new Error('Required parameter gameId was null or undefined when calling getAllBets.');
        }
        if (passphrase === null || passphrase === undefined) {
            throw new Error('Required parameter passphrase was null or undefined when calling getAllBets.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (passphrase !== undefined) {
            queryParameters = queryParameters.set('passphrase', <any>passphrase);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<TippResult>>(`${this.basePath}/Tipp/ALL/${encodeURIComponent(String(gameId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Submit a Tipp
     * 
     * @param userId User token.
     * @param token User token.
     * @param passphrase 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUsersBets(userId: number, token: string, passphrase: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Tipp>>;
    public getUsersBets(userId: number, token: string, passphrase: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Tipp>>>;
    public getUsersBets(userId: number, token: string, passphrase: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Tipp>>>;
    public getUsersBets(userId: number, token: string, passphrase: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getUsersBets.');
        }
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling getUsersBets.');
        }
        if (passphrase === null || passphrase === undefined) {
            throw new Error('Required parameter passphrase was null or undefined when calling getUsersBets.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (passphrase !== undefined) {
            queryParameters = queryParameters.set('passphrase', <any>passphrase);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<Tipp>>(`${this.basePath}/Tipp/${encodeURIComponent(String(userId))}/${encodeURIComponent(String(token))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
